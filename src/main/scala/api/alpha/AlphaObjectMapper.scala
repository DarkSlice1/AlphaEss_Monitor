package api.alpha

import api.common.RestBody
import api.common.Token
import com.fasterxml.jackson.annotation.JsonInclude

import java.util.Date
import scala.util.Try

object AlphaObjectMapper {

  case class LoginDetails(
                           username: String,
                           password: String
                         ) extends RestBody

  case class LoginReply(
                         code: Int,
                         info: String,
                         data: Token)


  case class SystemDetails(
                            sys_sn: String,
                            noLoading: String
                          ) extends RestBody

  case class SystemDetailsReply(
                                 code: Int,
                                 info: String,
                                 data: AlphaMetrics
                               ) extends RestBody

  case class AlphaMetrics
  (
    _id: String,
    createtime: Date,
    uploadtime: Date,
    sn: String,
    ppv1: Double,
    ppv2: Double,
    ppv3: Double,
    ppv4: Double,
    preal_l1: Double,
    preal_l2: Double,
    preal_l3: Double,
    pmeter_l1: Double,
    pmeter_l2: Double,
    pmeter_l3: Double,
    pmeter_dc: Double,
    soc: Double,
    factory_flag: Int,
    pbat: Double,
    sva: Double,
    varac: Double,
    vardc: Double,
    ev1_power: Int,
    ev1_chgenergy_real: Double,
    ev1_mode: Int,
    ev2_power: Int,
    ev2_chgenergy_real: Double,
    ev2_mode: Int,
    ev3_power: Int,
    ev3_chgenergy_real: Double,
    ev3_mode: Int,
    ev4_power: Int,
    ev4_chgenergy_real: Double,
    ev4_mode: Int,
    poc_meter_l1: Double,
    poc_meter_l2: Double,
    poc_meter_l3: Double
  )


  case class AlphaESSReceivedSetting(
                                      code: Int,
                                      info: String,
                                      data: AlphaESSReceivedSettingData
                                    )

  case class AlphaESSReceivedSettingData(
                                          sys_sn: String,
                                          ems_version: String,
                                          charge_workdays: String,
                                          grid_charge: Int,
                                          time_chaf1a: String,
                                          time_chae1a: String,
                                          time_chaf2a: String,
                                          time_chae2a: String,
                                          bakbox_ver: String,
                                          ctr_dis: Int,
                                          time_disf1a: String,
                                          time_dise1a: String,
                                          time_disf2a: String,
                                          time_dise2a: String,
                                          bat_high_cap: Double,
                                          bat_use_cap: Double,
                                          charge_weekend: String,
                                          grid_Charge_we: Double,
                                          time_cha_fwe1a: String,
                                          time_cha_ewe1a: String,
                                          time_cha_fwe2a: String,
                                          time_cha_ewe2a: String,
                                          bat_highcap_we: Double,
                                          ctr_dis_we: Int,
                                          time_dis_fwe1a: String,
                                          time_dis_ewe1a: String,
                                          time_dis_fwe2a: String,
                                          time_dis_ewe2a: String,
                                          bat_usecap_we: Double,
                                          basic_mode_jp: Int,
                                          peace_mode_jp: Int,
                                          vpp_mode_jp: Int,
                                          channel1: String,
                                          control_mode1: String,
                                          start_time1a: String,
                                          end_time1a: String,
                                          start_time1b: String,
                                          end_time1b: String,
                                          date1: String,
                                          charge_soc1: String,
                                          ups1: String,
                                          switch_on1: Int,
                                          switch_off1: Int,
                                          delay1: String,
                                          duration1: String,
                                          pause1: String,
                                          channel2: String,
                                          control_mode2: String,
                                          start_time2a: String,
                                          end_time2a: String,
                                          start_time2b: String,
                                          end_time2b: String,
                                          date2: String,
                                          charge_soc2: String,
                                          ups2: String,
                                          switch_on2: Int,
                                          switch_off2: Int,
                                          delay2: String,
                                          duration2: String,
                                          pause2: String,
                                          l1_priority: Int,
                                          l2_priority: Int,
                                          l3_priority: Int,
                                          l1_soc_limit: Double,
                                          l2_soc_limit: Double,
                                          l3_soc_limit: Double,
                                          charge_mode2: Int,
                                          charge_mode1: Int,
                                          backupbox: Int,
                                          minv: String,
                                          mbat: String,
                                          generator: Int,
                                          gc_output_mode: Int,
                                          generator_mode: Int,
                                          gc_soc_start: Int,
                                          gc_soc_end: Int,
                                          gc_time_start: Int,
                                          gc_time_end: Int,
                                          gc_charge_power: Int,
                                          gc_rated_power: Int,
                                          dg_cap: Int,
                                          dg_frequency: Int,
                                          gc_rate_percent: Int,
                                          chargingpile: String,//null
                                          currentsetting: Double,
                                          chargingmode: Int,
                                          charging_pile_list: String, //null,
                                          chargingpile_control_open: Int,
                                          peak_fill_en: Int,
                                          peakvalue: Double,
                                          fillvalue: Double,
                                          delta: Double,
                                          peak_s1a: String,
                                          peak_e1a: String,
                                          peak_s2a: String,
                                          peak_e2a: String,
                                          fill_s1a: String,
                                          fill_e1a: String,
                                          fill_s2a: String,
                                          fill_e2a: String,
                                          pm_offset: Double,
                                          pm_max: Double,
                                          pm_offset_en: Int,
                                          pm_offset_s1a: String,
                                          pm_offset_e1a: String,
                                          pm_offset_s2a: String,
                                          pm_offset_e2a: String,
                                          stoinv_type: Int,
                                          loadcut_soc: Int,
                                          loadtied_soc: Int,
                                          ac_tied: Int,
                                          soc_50_flag: Int,
                                          auto_soccalib_en: Int,
                                          three_unbalance_en: Int,
                                          enable_current_set: Int,
                                          enable_obc_set: Int
                                        )
  object AlphaESSSendSetting{
    def from(receivedType: AlphaESSReceivedSettingData) : AlphaESSSendSetting= {

      def tryToInt(string :String): Int = {
        Try(string.toInt).toOption.getOrElse(0)
      }

      new AlphaESSSendSetting(
        sys_sn = receivedType.sys_sn,
        ems_version = receivedType.ems_version,
        charge_workdays = receivedType.charge_workdays,
        grid_charge = receivedType.grid_charge,
        time_chaf1a = receivedType.time_chaf1a,
        time_chae1a = receivedType.time_chae1a,
        time_chaf2a = receivedType.time_chaf2a,
        time_chae2a = receivedType.time_chae2a,
        bakbox_ver = receivedType.bakbox_ver,
        ctr_dis = receivedType.ctr_dis,
        time_disf1a = receivedType.time_disf1a,
        time_dise1a = receivedType.time_dise1a,
        time_disf2a = receivedType.time_disf2a,
        time_dise2a = receivedType.time_dise2a,
        bat_high_cap = ""+receivedType.bat_high_cap,
        bat_use_cap = receivedType.bat_use_cap.toInt,
        charge_weekend = receivedType.charge_weekend,
        grid_Charge_we = receivedType.grid_Charge_we.toInt,
        time_cha_fwe1a = receivedType.time_cha_fwe1a,
        time_cha_ewe1a = receivedType.time_cha_ewe1a,
        time_cha_fwe2a = receivedType.time_cha_fwe2a,
        time_cha_ewe2a = receivedType.time_cha_ewe2a,
        bat_highcap_we = receivedType.bat_highcap_we.toInt,
        ctr_dis_we = receivedType.ctr_dis_we,
        time_dis_fwe1a = receivedType.time_dis_fwe1a,
        time_dis_ewe1a = receivedType.time_dis_ewe1a,
        time_dis_fwe2a = receivedType.time_dis_fwe2a,
        time_dis_ewe2a = receivedType.time_dis_ewe2a,
        bat_usecap_we = receivedType.bat_usecap_we.toInt,
        basic_mode_jp = receivedType.basic_mode_jp,
        peace_mode_jp = receivedType.peace_mode_jp,
        vpp_mode_jp = receivedType.vpp_mode_jp,
        channel1 = receivedType.channel1,
        control_mode1 = receivedType.control_mode1,
        start_time1a = receivedType.start_time1a,
        end_time1a = receivedType.end_time1a,
        start_time1b = receivedType.start_time1b,
        end_time1b = receivedType.end_time1b,
        date1 = receivedType.date1,
        charge_soc1 = receivedType.charge_soc1,
        ups1 = receivedType.ups1,
        switch_on1 = receivedType.switch_on1,
        switch_off1 = receivedType.switch_off1,
        delay1 = tryToInt(receivedType.delay1),
        duration1 = tryToInt(receivedType.duration1),
        pause1 = tryToInt(receivedType.pause1),
        channel2 = receivedType.channel2,
        control_mode2 = receivedType.control_mode2,
        start_time2a = receivedType.start_time2a,
        end_time2a = receivedType.end_time2a,
        start_time2b = receivedType.start_time2b,
        end_time2b = receivedType.end_time2b,
        date2 = receivedType.date2,
        charge_soc2 = receivedType.charge_soc2,
        ups2 = receivedType.ups2,
        switch_on2 = receivedType.switch_on2,
        switch_off2 = receivedType.switch_off2,
        delay2 = tryToInt(receivedType.delay2),
        duration2 = tryToInt(receivedType.duration2),
        pause2 = tryToInt(receivedType.pause2),
        l1_priority = receivedType.l1_priority,
        l2_priority = receivedType.l2_priority,
        l3_priority = receivedType.l3_priority,
        l1_soc_limit = receivedType.l1_soc_limit.toInt,
        l2_soc_limit = receivedType.l2_soc_limit.toInt,
        l3_soc_limit = receivedType.l3_soc_limit.toInt,
        charge_mode2 = receivedType.charge_mode2,
        charge_mode1 = receivedType.charge_mode1,
        backupbox = receivedType.backupbox,
        minv = receivedType.minv,
        mbat = receivedType.mbat.toUpperCase(),
        generator = receivedType.generator,
        gc_output_mode = receivedType.gc_output_mode,
        generator_mode = receivedType.generator_mode,
        gc_soc_start = receivedType.gc_soc_start,
        gc_soc_end = receivedType.gc_soc_end,
        gc_time_start = ""+receivedType.gc_time_start,
        gc_time_end = ""+receivedType.gc_time_end,
        gc_charge_power = receivedType.gc_charge_power,
        gc_rated_power = receivedType.gc_rated_power,
        dg_cap = receivedType.dg_cap,
        dg_frequency = receivedType.dg_frequency,
        gc_rate_percent = receivedType.gc_rate_percent,
        chargingpile = receivedType.chargingpile,//null
        currentsetting = receivedType.currentsetting.toInt,
        chargingmode = receivedType.chargingmode,
        charging_pile_list = receivedType.charging_pile_list, //null,
        peak_fill_en = receivedType.peak_fill_en,
        peakvalue = receivedType.peakvalue.toInt,
        fillvalue = receivedType.fillvalue.toInt,
        delta = receivedType.delta.toInt,
        peak_s1a = receivedType.peak_s1a,
        peak_e1a = receivedType.peak_e1a,
        peak_s2a = receivedType.peak_s2a,
        peak_e2a = receivedType.peak_e2a,
        fill_s1a = receivedType.fill_s1a,
        fill_e1a = receivedType.fill_e1a,
        fill_s2a = receivedType.fill_s2a,
        fill_e2a = receivedType.fill_e2a,
        pm_offset = receivedType.pm_offset.toInt,
        pm_max = receivedType.pm_max.toInt,
        pm_offset_en = receivedType.pm_offset_en,
        pm_offset_s1a = receivedType.pm_offset_s1a,
        pm_offset_e1a = receivedType.pm_offset_e1a,
        pm_offset_s2a = receivedType.pm_offset_s2a,
        pm_offset_e2a = receivedType.pm_offset_e2a,
        stoinv_type = receivedType.stoinv_type,
        loadcut_soc = receivedType.loadcut_soc,
        loadtied_soc = receivedType.loadtied_soc,
        ac_tied = receivedType.ac_tied,
        soc_50_flag = receivedType.soc_50_flag,
        auto_soccalib_en = 0, //hardcoding for mow
        sts_en = 1, //hardcoding for mow
        auto_startdg_en = 0, //hardcoding for mow
        max_gridcharge = 10, //hardcoding for mow
        languageCode = "en-US" //hardcoding for mow //TODO highlight in readme
      )
    }
  }

  case class AlphaESSSendSetting(
                                  sys_sn: String,
                                  ems_version: String,
                                  charge_workdays: String,
                                  grid_charge: Int,
                                  time_chaf1a: String,
                                  time_chae1a: String,
                                  time_chaf2a: String,
                                  time_chae2a: String,
                                  bakbox_ver: String,
                                  ctr_dis: Int,
                                  time_disf1a: String,
                                  time_dise1a: String,
                                  time_disf2a: String,
                                  time_dise2a: String,
                                  bat_high_cap: String,
                                  bat_use_cap: Int,
                                  charge_weekend: String,
                                  grid_Charge_we: Int,
                                  time_cha_fwe1a: String,
                                  time_cha_ewe1a: String,
                                  time_cha_fwe2a: String,
                                  time_cha_ewe2a: String,
                                  bat_highcap_we: Int,
                                  ctr_dis_we: Int,
                                  time_dis_fwe1a: String,
                                  time_dis_ewe1a: String,
                                  time_dis_fwe2a: String,
                                  time_dis_ewe2a: String,
                                  bat_usecap_we: Int,
                                  basic_mode_jp: Int,
                                  peace_mode_jp: Int,
                                  vpp_mode_jp: Int,
                                  channel1: String,
                                  control_mode1: String,
                                  start_time1a: String,
                                  end_time1a: String,
                                  start_time1b: String,
                                  end_time1b: String,
                                  date1: String,
                                  charge_soc1: String,
                                  ups1: String,
                                  switch_on1: Int,
                                  switch_off1: Int,
                                  delay1: Int,
                                  duration1: Int,
                                  pause1: Int,
                                  channel2: String,
                                  control_mode2: String,
                                  start_time2a: String,
                                  end_time2a: String,
                                  start_time2b: String,
                                  end_time2b: String,
                                  date2: String,
                                  charge_soc2: String,
                                  ups2: String,
                                  switch_on2: Int,
                                  switch_off2: Int,
                                  delay2: Int,
                                  duration2: Int,
                                  pause2: Int,
                                  l1_priority: Int,
                                  l2_priority: Int,
                                  l3_priority: Int,
                                  l1_soc_limit: Int,
                                  l2_soc_limit: Int,
                                  l3_soc_limit: Int,
                                  charge_mode2: Int,
                                  charge_mode1: Int,
                                  backupbox: Int,
                                  minv: String,
                                  mbat: String,
                                  generator: Int,
                                  gc_output_mode: Int,
                                  generator_mode: Int,
                                  gc_soc_start: Int,
                                  gc_soc_end: Int,
                                  gc_time_start: String,
                                  gc_time_end: String,
                                  gc_charge_power: Int,
                                  gc_rated_power: Int,
                                  dg_cap: Int,
                                  dg_frequency: Int,
                                  gc_rate_percent: Int,
                                  @JsonInclude(JsonInclude.Include.ALWAYS)
                                  @JsonInclude(JsonInclude.Include.NON_NULL)
                                  chargingpile: String,
                                  currentsetting: Int,
                                  chargingmode: Int,
                                  @JsonInclude(JsonInclude.Include.ALWAYS)
                                  @JsonInclude(JsonInclude.Include.NON_NULL)
                                  charging_pile_list: String,
                                  peak_fill_en: Int,
                                  peakvalue: Int,
                                  fillvalue: Int,
                                  delta: Int,
                                  peak_s1a: String,
                                  peak_e1a: String,
                                  peak_s2a: String,
                                  peak_e2a: String,
                                  fill_s1a: String,
                                  fill_e1a: String,
                                  fill_s2a: String,
                                  fill_e2a: String,
                                  pm_offset: Int,
                                  pm_max: Int,
                                  pm_offset_en: Int,
                                  pm_offset_s1a: String,
                                  pm_offset_e1a: String,
                                  pm_offset_s2a: String,
                                  pm_offset_e2a: String,
                                  stoinv_type: Int,
                                  loadcut_soc: Int,
                                  loadtied_soc: Int,
                                  ac_tied: Int,
                                  soc_50_flag: Int,
                                  auto_soccalib_en: Int,
                                  sts_en: Int,
                                  auto_startdg_en: Int,
                                  max_gridcharge: Int,
                                  languageCode: String
                                ) extends RestBody

}
